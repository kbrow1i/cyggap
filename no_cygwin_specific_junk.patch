--- origsrc/gap4r6/src/streams.c	2013-07-20 16:11:08.000000000 -0400
+++ src/gap4r6/src/streams.c	2013-08-18 14:10:39.057716900 -0400
@@ -2125,8 +2097,6 @@ Obj FuncREAD_STRING_FILE (
             "you can replace <fid> via 'return <fid>;'" );
     }
 
-#if ! SYS_IS_CYGWIN32
-    /* fstat seems completely broken under CYGWIN */
 #if HAVE_STAT
     /* first try to get the whole file as one chunk, this avoids garbage
        collections because of the GROW_STRING calls below    */
@@ -2146,7 +2116,6 @@ Obj FuncREAD_STRING_FILE (
         }
     }
 #endif
-#endif
     /* read <fid> until we see  eof   (in 20kB pieces)                     */
     str = NEW_STRING(0);
     len = 0;
--- origsrc/gap4r6/src/sysfiles.c	2013-07-20 16:11:08.000000000 -0400
+++ src/gap4r6/src/sysfiles.c	2013-08-18 14:18:39.582961400 -0400
@@ -1083,7 +1079,6 @@ extern void syStopraw (
   struct termio   syOld, syNew;           /* old and new terminal state      */
 
   #ifndef TCSETAW
-    /* cygwin32 provides no SETAW. Try using SETA instead in that case */
     #define TCSETAW TCSETA
   #endif
 
--- origsrc/gap4r6/src/system.c	2013-07-20 16:11:08.000000000 -0400
+++ src/gap4r6/src/system.c	2013-08-18 14:07:51.734222600 -0400
@@ -458,7 +458,7 @@ UInt SyStopTime;
 **  Use use   'getrusage'  if possible,  because  it gives  us  a much better
 **  resolution. 
 */
-#if HAVE_GETRUSAGE && !SYS_IS_CYGWIN32
+#if HAVE_GETRUSAGE
 
 #if HAVE_SYS_TIME_H
 # include       <sys/time.h>            /* definition of 'struct timeval'  */
@@ -518,10 +518,8 @@ UInt SyTimeChildrenSys ( void )
 **  The 'times' POSIX call measures clock ticks in 1/CLOCKS_PER_SEC. Typically,
 **  CLOCKS_PER_SEC equals 60 or 100. On most systems, the 'times' API has been
 **  deprecated in favor of 'getrusage', which provides a much better resolution.
-**
-**  Cygwin claims to support 'getrusage' but child times are not given properly.
 */
-#if HAVE_TIMES && (SYS_IS_CYGWIN32 || !HAVE_GETRUSAGE)
+#if HAVE_TIMES && !HAVE_GETRUSAGE
 
 #include <time.h> /* for CLOCKS_PER_SEC */
 
@@ -1782,12 +1763,8 @@ void InitSystem (
     SyAllocPool = 4096L*1024*1024;   /* Note this is in bytes! */
 #else
     SyStorMax = 1024*1024L;          /* This is in kB! */
-#if SYS_IS_CYGWIN32
-    SyAllocPool = 0;                 /* works better on cygwin */
-#else
     SyAllocPool = 1536L*1024*1024;   /* Note this is in bytes! */
 #endif
-#endif
     SyStorOverrun = 0;
     SyStorKill = 0;
     SyStorMin = SY_STOR_MIN;         /* see system.h */
--- origsrc/gap4r6/pkg/cvec/src/cvec.c	2013-07-19 05:09:23.000000000 -0400
+++ src/gap4r6/pkg/cvec/src/cvec.c	2013-08-21 10:05:48.147248900 -0400
@@ -44,10 +44,6 @@ WORD myarena[(2048*1024+1024*1024)/4];
 WORD *arenastart;
 #endif
 
-#if SYS_IS_CYGWIN32
-#include <cygwin/in.h>
-#endif
-
 /* Our basic unit is a C unsigned long: */
 typedef unsigned long Word;  /* Our basic unit for operations, 32 or 64 bits */
 #define Word32 UInt4
--- origsrc/gap4r6/pkg/io/src/io.c	2013-07-19 05:09:32.000000000 -0400
+++ src/gap4r6/pkg/io/src/io.c	2013-08-21 10:03:34.639612700 -0400
@@ -80,16 +80,12 @@ const char * Revision_io_c =
 #ifdef HAVE_NETINET_TCP_H
 #include <netinet/tcp.h>
 #endif
-#if SYS_IS_CYGWIN32
-#include <cygwin/in.h>
-#endif
 
 /* The following seems to be necessary to run under modern gcc compilers
  * which have the ssp stack checking enabled. Hopefully this does not
  * hurt in future or other versions... */
 #ifdef __GNUC__
 #if (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 1))
-#if SYS_IS_CYGWIN32 == 0
 extern void __stack_chk_fail();
 void __stack_chk_fail_local (void)
 {
@@ -97,7 +93,6 @@ void __stack_chk_fail_local (void)
 }
 #endif
 #endif
-#endif
 
 
 /* Functions that are done:
